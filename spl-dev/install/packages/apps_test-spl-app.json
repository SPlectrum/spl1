{
  "headers": {
    "spl": {
      "package": {
        "name": "apps_test-spl-app.json"
      }
    }
  },
  "value": {
    "/test-spl-app/batches/js-help-tests.batch": "spl/console/log \"=== Testing help functionality for JS script commands ===\"\r\n\r\nspl/console/log \"Test 1: spl/app/run help\"\r\nspl/app/run --help\r\n\r\nspl/console/log \"Test 2: spl/app/wrap help\"\r\nspl/app/wrap --help\r\n\r\nspl/console/log \"=== JS script help tests completed ===\"",
    "/test-spl-app/batches/js-run-tests.batch": "spl/console/log \"=== Testing spl/app/run with JavaScript scripts ===\"\r\n\r\nspl/console/log \"Test 1: Simple JS script execution\"\r\nspl/app/run -f simple-test.js\r\n\r\nspl/console/log \"Test 2: JS script with arguments\"\r\nspl/app/run -f args-test.js -a hello world\r\n\r\nspl/console/log \"Test 3: SPL context access in JS script\"\r\nspl/app/run -f spl-context-test.js\r\n\r\nspl/console/log \"=== spl/app/run JS tests completed ===\"",
    "/test-spl-app/batches/js-wrap-tests.batch": "spl/console/log \"=== Testing spl/app/wrap with JavaScript scripts ===\"\r\n\r\nspl/console/log \"Test 1: Wrap simple JS script\"\r\nspl/app/wrap -f simple-test.js\r\n\r\nspl/console/log \"Test 2: Wrap JS script with arguments\"  \r\nspl/app/wrap -f args-test.js\r\n\r\nspl/console/log \"Test 3: Wrap SPL context script\"\r\nspl/app/wrap -f spl-context-test.js\r\n\r\nspl/console/log \"=== spl/app/wrap JS tests completed ===\"",
    "/test-spl-app/batches/js-wrapped-execution-tests.batch": "spl/console/log \"=== Testing execution of wrapped JS scripts ===\"\r\n\r\nspl/console/log \"Test 1: Execute wrapped simple script\"\r\nusr/simple-test\r\n\r\nspl/console/log \"Test 2: Execute wrapped args script with parameters\"\r\nusr/args-test -a hello world\r\n\r\nspl/console/log \"Test 3: Execute wrapped SPL context script\"\r\nusr/spl-context-test\r\n\r\nspl/console/log \"=== Wrapped JS execution tests completed ===\"",
    "/test-spl-app/batches/simple.batch": "spl/console/log \"Hello from simple batch file\"\r\nspl/console/log \"Testing parameter: $1\"",
    "/test-spl-app/batches/spl-app-basic-tests.batch": "spl/console/log \"Testing basic spl/app functionality\"\r\nspl/app/exec -f simple.batch -a \"test-parameter\"\r\nspl/console/log \"Basic spl/app tests completed\"",
    "/test-spl-app/batches/spl-app-help-tests.batch": "spl/app/create --help\r\nspl/app/exec --help\r\nspl/app/generate --help\r\nspl/app/parse --help\r\nspl/app/pipeline --help\r\nspl/app/process --help",
    "/test-spl-app/data/": {},
    "/test-spl-app/modules/arguments.json": "{\r\n    \"headers\": \r\n    {\r\n        \"top\" : [\r\n            { \"header\": \"SPlectrum spl/app API Test App\" },\r\n            { \"content\": \"Test application for validating spl/app API functionality including batch processing, command generation, and script execution.\" }\r\n        ],\r\n        \"header\": [\r\n            { \"content\": \"Overview 1.\" },\r\n            { \"content\": \"{bold syntax}: {italic ./spl <options> <package>}\" }\r\n        ],\r\n        \"bottom\": [ \r\n            { \"content\": \"Project home: {underline https://github.com/SPlectrum/spl}\" } ]\r\n    },\r\n    \"value\": \r\n    [ \r\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" }, \r\n        { \"name\": \"test\", \"alias\": \"t\", \"type\": \"Boolean\", \"description\": \"test - parse commands but do not execute.\", \"typeLabel\": \"flag\" }, \r\n        { \"name\": \"steps\", \"alias\": \"s\", \"type\": \"Number\", \"description\": \"TTL of the command execution.\"},\r\n        { \"name\": \"verbose\", \"alias\": \"v\", \"type\": \"Boolean\", \"description\": \"Do verbose output on completion.\"},\r\n        { \"name\": \"debug\", \"alias\": \"d\", \"type\": \"Boolean\", \"description\": \"Do debug output on completion.\"}\r\n    ]\r\n}\r\n",
    "/test-spl-app/modules/spl.js": "//  name        SPL Package Useful Functions\r\n//  URI         spl/spl\r\n//  type        Auxiliary Library\r\n//  description Library of auxiliary methods at package level\r\n//              It contains methods to invoke actions, set properties and\r\n//              interacts with the workspace.\r\n///////////////////////////////////////////////////////////////////////////////\r\nconst { randomUUID } = require('crypto');\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n// Gets a configuration value associated with the action currently being executed\r\nfunction spl_action ( input, key )\r\n{\r\n    // get the current action\r\n    var action;\r\n    if ( spl_context ( input, \"action\" ) === \"spl/execute/next\" ) action = spl_request ( input, \"action\");\r\n    else action = spl_context ( input, \"action\" );\r\n    return spl_config ( input, action, key );\r\n}\r\nexports.action = spl_action;\r\n\r\n// Gets a configuration value for the specified action\r\nfunction spl_config ( input, action, key )\r\n{\r\n    // split the current action ( request or execute )\r\n    var parts = parts = action.split ( \"/\" ), result, entry;\r\n    const apiRef = `${parts[0]}.${parts[1]}`;\r\n    const apiRefUri = `${parts[0]}/${parts[1]}`;\r\n    const methodRef = `${parts[0]}.${parts[1]}.${parts[2]}`;\r\n    const methodRefUri = action;\r\n\r\n    // first: check execution header for method config\r\n    if ( key === undefined ) result = spl_rcRef ( input.headers, methodRef );\r\n    else result = spl_rcRef ( input.headers, `${methodRef}.${key}` );\r\n    if ( !( result === undefined ) ) return result;\r\n\r\n    // second: check workspace method entry header for method config\r\n    entry = spl_wsRef ( input, methodRefUri );\r\n    if ( entry && entry.headers ) {\r\n        result = spl_rcRef ( entry.headers, methodRef );\r\n        if ( !( result === undefined || key === undefined ) ) result = result[key];\r\n    }\r\n    if ( !( result === undefined ) ) return result;\r\n\r\n    // third: check workspace API entry header  for method config\r\n    entry = spl_wsRef ( input, apiRefUri );\r\n    if ( entry && entry.headers ) {\r\n        result = spl_rcRef ( entry.headers, methodRef );\r\n        if ( !( result === undefined || key === undefined ) ) result = result[key];\r\n    }\r\n    if ( !( result === undefined ) ) return result;\r\n\r\n    // no API default for full method property set\r\n    if ( key === undefined ) return result; // no default\r\n\r\n    // fourth: check execution header for API config (default)\r\n    result = spl_rcRef ( input.headers, `${apiRef}.${key}` );\r\n    if ( !( result === undefined ) ) return result;\r\n    \r\n    // fifth: check workspace API entry header for API config (default)\r\n    entry = spl_wsRef ( input, apiRefUri );\r\n    if ( entry && entry.headers ) {\r\n        result = spl_rcRef ( entry.headers, apiRef );\r\n        if ( !( result === undefined ) ) result = result[key];\r\n    }\r\n    return result;\r\n}\r\nexports.config = spl_config;\r\n\r\n// get execution context properties\r\nfunction spl_context ( input, key ) { return ( ( key === undefined ) ? input.headers.spl.execute : input.headers.spl.execute[key] ); }\r\nexports.context = spl_context;\r\n\r\n// get request properties only ( spl/execute/request )\r\nfunction spl_request ( input, key ) { return ( ( key === undefined ) ? input.headers.spl.request : input.headers.spl.request[key] ); }\r\nexports.request = spl_request;\r\n\r\n// set current action specific properties \r\nfunction spl_setAction ( input, key, value ) {\r\n    var action;\r\n    if ( spl_context ( input, \"action\" ) === \"spl/execute/next\" ) action = spl_request ( input, \"action\");\r\n    else action = spl_context ( input, \"action\" );\r\n    return spl_setConfig ( input, action, key, value );\r\n}\r\nexports.setAction = spl_setAction;\r\n\r\n// set method / api specific properties \r\nfunction spl_setConfig ( input, action, key, value ) {\r\n    action = action.replaceAll ( \"/\", \".\" );\r\n    if ( key === null ) spl_rcSet ( input.headers, action, value );\r\n    else  spl_rcSet ( input.headers, `${action}.${key}`, value );\r\n}\r\nexports.setConfig = spl_setConfig;\r\n\r\n// set execution context properties\r\nfunction spl_setContext ( input, key, value ) { \r\n    if ( key === null ) return spl_rcSet ( input, \"headers.spl.execute\", value ); \r\n    else return spl_rcSet ( input, `headers.spl.execute.${key}`, value ); \r\n}\r\nexports.setContext = spl_setContext;\r\n\r\n// set request properties only ( spl/execute/request )\r\nfunction spl_setRequest ( input, key, value ) {\r\n    if ( key === null ) return spl_rcSet ( input, \"headers.spl.request\", value );\r\n    else spl_rcSet ( input, `headers.spl.request.${key}`, value );\r\n}\r\nexports.setRequest = spl_setRequest;\r\n\r\n// Complete request\r\nexports.completed = function ( input ) {\r\n    var action;\r\n    if ( spl_context ( input, \"action\" ) === \"spl/execute/next\" ) {\r\n        action = spl_request ( input, \"action\" );\r\n        spl_setRequest ( input, \"status\", \"completed\" );\r\n    } else {\r\n        action = spl_context ( input, \"action\" );\r\n        spl_setContext ( input, \"action\", \"spl/execute/set-next\" );\r\n    }\r\n    spl_rcDelete ( input.headers, action.replaceAll ( \"/\", \".\" ) );\r\n}\r\n\r\n// construct a forward slash path with filename for platform internal use - dot converted to underscore\r\nexports.fURI = function ( ... args ) { \r\n    args[args.length-1] = args[args.length-1].replaceAll ( \".\", \"_\" );\r\n    var result = []; for(var i=0; i<args.length; i++) if(args[i] != \"\") result.push(args[i]);;\r\n    return result.join ( \"/\" );\r\n}\r\n\r\n// random UUID generation\r\nfunction generateUUID() { return randomUUID(); }\r\nexports.generateUUID = generateUUID;\r\n\r\n// wsAction sets an action for the execution context\r\nexports.gotoExecute = function ( input, action, args )\r\n{\r\n    var parts = action.split ( \"/\" );\r\n    if ( args != undefined ) spl_rcSet ( input.headers, parts.join ( \".\" ), args );\r\n    spl_setRequest ( input, `${parts[1]}_next`, action );\r\n    spl_setRequest ( input, \"status\", parts[1] );\r\n    spl_setRequest ( input, \"repeat\", false );\r\n    spl_request ( input, \"action\" ); //.split ( \"/\" );\r\n    spl_rcDelete ( input.headers, spl_request ( input, \"action\" ).replaceAll ( \"/\", \".\" ) );\r\n}\r\n\r\n// add to execution history\r\nexports.history = function ( input, activity )\r\n{\r\n    const action = spl_request ( input, \"action\" ); \r\n    var message = [ action, spl_context ( input, \"action\" ), activity ];\r\n    var history = spl_context ( input, \"history\" );\r\n    if ( history === undefined ) history = spl_setContext ( input, \"history\", [] );\r\n    history.push ( message );\r\n    var consoleProgress = spl_context ( input, \"consoleProgress\" );\r\n    if ( consoleProgress && consoleProgress != action )\r\n    {\r\n        consoleProgress = action;\r\n        console.log ( ` > ${consoleProgress}` );\r\n        spl_setContext ( input, \"consoleProgress\", consoleProgress );\r\n    }\r\n    if ( activity.substring ( 0, 5 ) == \"ERROR\" ) console.error ( message.join ( \" - \" ) );\r\n    else if ( spl_context ( input, \"consoleMode\" ) != \"silent\" && activity.substring ( 0, 7 ) == \"WARNING\" ) console.error ( message.join ( \" - \" ) );\r\n}\r\n\r\n// easy functions to invoke actions\r\nexports.moduleAction = function (input, module)\r\n{\r\n    var moduleRoot = spl_context ( input, \"modules\" );\r\n    if ( moduleRoot === undefined ) moduleRoot = \"modules\";\r\n    var moduleOverlay = spl_context ( input, \"moduleOverlay\" );\r\n    if ( moduleOverlay )\r\n        for ( var i = 0; i < moduleOverlay.length; i++ )\r\n            if ( module.indexOf ( moduleOverlay[i].prefix ) == 0 )\r\n                { moduleRoot = moduleOverlay[i].moduleRoot; i = moduleOverlay.length; }\r\n    return require ( `${ spl_context ( input, \"cwd\" )}/${moduleRoot}/${module}`).default ( input );\r\n}\r\n\r\n// gets a deep clone of a keyvalue in input\r\nfunction spl_rcDelete (reference, key)\r\n{ \r\n    const keys = key.split(\".\");\r\n    for( i = 0; i < keys.length - 1; i++)\r\n    {\r\n        if(reference[keys[i]]==undefined) return;\r\n        reference = reference[keys[i]];\r\n    }\r\n    delete reference[keys[i]];\r\n}\r\nexports.rcDelete = spl_rcDelete;\r\n\r\n// gets a deep clone of a keyvalue in input\r\nfunction spl_rcGet (reference, key) { return structuredClone ( spl_rcRef ( reference, key ) ); }\r\nexports.rcGet = spl_rcGet;\r\n\r\n// gets a reference to a keyvalue in input\r\nfunction spl_rcRef (reference, key)\r\n{ \r\n    const keys = key.split(\".\");\r\n    for( i = 0; i < keys.length; i++) { if ( reference[keys[i]] === undefined ) return undefined; reference = reference[keys[i]]; }\r\n    return reference;\r\n}\r\nexports.rcRef = spl_rcRef;\r\n\r\n// Sets a value of a keyvalue in input\r\nfunction spl_rcSet (reference, key, value)\r\n{ \r\n    const keys = key.split(\".\");\r\n    for( i = 0; i < keys.length-1; i++) { if( reference[keys[i]] === undefined ) reference[keys[i]] = {}; reference = reference[keys[i]]; } \r\n    reference[keys[i]] = value;\r\n    return reference[keys[i]]\r\n}\r\nexports.rcSet = spl_rcSet;\r\n\r\n// Complete request\r\nexports.throwError = function ( input, message )\r\n{\r\n    spl_setContext ( input, \"action\", \"spl/error/catch\" );\r\n    spl_setConfig ( input, \"spl/error/catch\", \"message\", message );\r\n}\r\n\r\n// construct a forward slash path for platform internal use\r\nexports.URI = function ( ...args ) { \r\n    var result = []; for ( var i = 0; i < args.length; i++ ) if ( args[i] != \"\" ) result.push ( args[i] );\r\n    return result.join ( \"/\" );\r\n}\r\n\r\n// wsExists checks the presence of a property and loads it when not\r\nexports.wsExists = function ( input, key, action, args, repeat ) {\r\n    const parts = action.split ( \"/\" );\r\n    if( spl_wsRef ( input, key ) === undefined ) {\r\n        if( Array.isArray ( args ) ) spl_rcSet ( input.headers, parts.join ( \".\" ), args );\r\n        else spl_rcSet ( input.headers, parts.join ( \".\" ), [args] );\r\n        spl_setRequest ( input, `${parts[1]}_next`, action );\r\n        spl_setRequest ( input, \"status\", parts[1] );\r\n        spl_setRequest ( input, \"repeat\", repeat );\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n// wsGet returns a deep clone of a keyvalue in input.value.\r\nexports.wsGet = function ( input, key ) { \r\n    return structuredClone ( spl_rcRef ( input.value, key.replaceAll ( \".\", \".value.\" ) ) ); \r\n}\r\n\r\n// wsRef returns a reference to a keyvalue in input.value.\r\nfunction spl_wsRef (input, key) \r\n{ \r\n    const parts = key.split ( \".\" );\r\n    var value = spl_rcRef ( input.value, key.replaceAll ( \".\", \".value.\" ) );\r\n    if ( typeof value == \"string\" && !( \"spl/blob spl/package\").includes ( parts[0] ) ) value = spl_wsRef ( input, value );\r\n    return value;\r\n}\r\nexports.wsRef = spl_wsRef;\r\n\r\n// wsSet property sets a key in input.value but archives the existing keyvalue in an array.\r\nexports.wsSet = function (input, key, value)\r\n{ \r\n    const expandedKey = key.replaceAll ( \".\", \".value.\" );\r\n    const current = spl_rcRef ( input.value, expandedKey );\r\n    if( !( current === undefined ) ) {\r\n        var archive = spl_rcRef ( input.value, `${expandedKey}/archive` );\r\n        if ( archive === undefined ) archive = spl_rcSet ( input.value, `${expandedKey}/archive`, [] );\r\n        archive.push(current);\r\n    }\r\n    spl_rcSet ( input.value, expandedKey, value );\r\n}\r\n",
    "/test-spl-app/modules/usr/args-test.js": "//  name        args-test\n//  URI         usr/args-test\n//  type        API Method\n//  description Auto-generated wrapper for args-test.js\n///////////////////////////////////////////////////////////////////////////////\nconst spl = require(\"../spl.js\")\n///////////////////////////////////////////////////////////////////////////////\nexports.default = function usr_args_test (input)\n{\n    const actionArgs = spl.action(input, \"args\") || [];\n    let scriptContent = `console.log(\"Arguments test:\");\r\nconsole.log(\"Arg 1: \\$1\");\r\nconsole.log(\"Arg 2: \\$2\");  \r\nconsole.log(\"All args array: \\$@\");\r\nconsole.log(\"All args string: \\$*\");`;\n    \n    // Apply argument replacements\n    if (scriptContent.indexOf(\"\\$@\") > -1) scriptContent = scriptContent.replaceAll(\"\\$@\", actionArgs.toString());\n    if (scriptContent.indexOf(\"\\$*\") > -1) scriptContent = scriptContent.replaceAll(\"\\$*\", actionArgs.join(\" \"));\n    for (let i = 0; i < actionArgs.length; i++) {\n        scriptContent = scriptContent.replaceAll(\"\\$\" + (i+1).toString(), actionArgs[i]);\n    }\n    \n    eval(scriptContent);\n    spl.completed(input);\n}\n///////////////////////////////////////////////////////////////////////////////",
    "/test-spl-app/modules/usr/args-test_arguments.json": "{\n    \"headers\": { \"header\": [\n        { \"header\": \"usr/args-test\" },\n        { \"content\": \"Auto-generated wrapper for args-test.js.\" },\n        { \"content\": \"{bold syntax}: {italic ./spl <appOpts> usr/args-test <opts>}\" }\n    ]},\n    \"value\": [\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" },\n        { \"name\": \"args\", \"alias\": \"a\", \"multiple\": true, \"description\": \"Arguments to pass to the wrapped script.\" }\n    ]\n}",
    "/test-spl-app/modules/usr/js-help-tests.js": "//  name        js-help-tests\n//  URI         usr/js-help-tests\n//  type        API Method\n//  description Auto-generated command from batch file js-help-tests.batch\n///////////////////////////////////////////////////////////////////////////////\nconst spl = require(\"../spl.js\")\n///////////////////////////////////////////////////////////////////////////////\nexports.default = function usr_js_help_tests (input)\n{\n    // Set the appRoot configuration\n    const appRoot = spl.context ( input, \"appRoot\" );\n    spl.setConfig ( input, \"spl/app\", \"appRoot\", appRoot );\n    \n    // Get arguments passed to this action\n    const actionArgs = spl.action(input, \"args\") || [];\n    \n    // Get the pre-parsed pipeline\n    let pipeline = [\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"===\",\n                                \"Testing\",\n                                \"help\",\n                                \"functionality\",\n                                \"for\",\n                                \"JS\",\n                                \"script\",\n                                \"commands\",\n                                \"===\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"1:\",\n                                \"spl/app/run\",\n                                \"help\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"2:\",\n                                \"spl/app/wrap\",\n                                \"help\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"===\",\n                                \"JS\",\n                                \"script\",\n                                \"help\",\n                                \"tests\",\n                                \"completed\",\n                                \"===\\\"\"\n                        ]\n                }\n        }\n];\n    const globalOptions = {\n        \"help\": [\n                \"spl/app/run\",\n                \"spl/app/wrap\"\n        ]\n};\n    \n    // Apply argument replacements to the pipeline\n    let pipelineStr = JSON.stringify(pipeline);\n    if (pipelineStr.indexOf(\"\\$@\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$@\", actionArgs.toString());\n    if (pipelineStr.indexOf(\"\\$*\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$*\", actionArgs.join(\" \"));\n    for (let i = 0; i < actionArgs.length; i++) {\n        pipelineStr = pipelineStr.replaceAll(\"\\$\" + (i+1).toString(), actionArgs[i]);\n    }\n    pipeline = JSON.parse(pipelineStr);\n    \n    // Set up the execution pipeline\n    spl.wsSet(input, \"spl/execute.set-pipeline\", {\n        headers: {\n            spl: {\n                execute: {\n                    pipeline: pipeline\n                }\n            }\n        },\n        value: {}\n    });\n    \n    // Apply global options if any\n    if (globalOptions.consoleMode) {\n        spl.setContext(input, \"consoleMode\", globalOptions.consoleMode);\n    }\n    \n    spl.gotoExecute ( input, \"spl/execute/set-pipeline\" );\n}\n///////////////////////////////////////////////////////////////////////////////",
    "/test-spl-app/modules/usr/js-help-tests_arguments.json": "{\n    \"headers\": { \"header\": [\n        { \"header\": \"usr/js-help-tests\" },\n        { \"content\": \"Auto-generated command from batch file js-help-tests.batch.\" },\n        { \"content\": \"{bold syntax}: {italic ./spl <appOpts> usr/js-help-tests <opts>}\" }\n    ]},\n    \"value\": [\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" },\n        { \"name\": \"args\", \"alias\": \"a\", \"multiple\": true, \"description\": \"Arguments to pass to the batch commands.\" }\n    ]\n}",
    "/test-spl-app/modules/usr/js-run-tests.js": "//  name        js-run-tests\n//  URI         usr/js-run-tests\n//  type        API Method\n//  description Auto-generated command from batch file js-run-tests.batch\n///////////////////////////////////////////////////////////////////////////////\nconst spl = require(\"../spl.js\")\n///////////////////////////////////////////////////////////////////////////////\nexports.default = function usr_js_run_tests (input)\n{\n    // Set the appRoot configuration\n    const appRoot = spl.context ( input, \"appRoot\" );\n    spl.setConfig ( input, \"spl/app\", \"appRoot\", appRoot );\n    \n    // Get arguments passed to this action\n    const actionArgs = spl.action(input, \"args\") || [];\n    \n    // Get the pre-parsed pipeline\n    let pipeline = [\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"===\",\n                                \"Testing\",\n                                \"spl/app/run\",\n                                \"with\",\n                                \"JavaScript\",\n                                \"scripts\",\n                                \"===\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"1:\",\n                                \"Simple\",\n                                \"JS\",\n                                \"script\",\n                                \"execution\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/app/run\",\n                \"spl/app/run\": {\n                        \"file\": \"simple-test.js\"\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"2:\",\n                                \"JS\",\n                                \"script\",\n                                \"with\",\n                                \"arguments\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/app/run\",\n                \"spl/app/run\": {\n                        \"file\": \"args-test.js\",\n                        \"args\": [\n                                \"hello\",\n                                \"world\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"3:\",\n                                \"SPL\",\n                                \"context\",\n                                \"access\",\n                                \"in\",\n                                \"JS\",\n                                \"script\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/app/run\",\n                \"spl/app/run\": {\n                        \"file\": \"spl-context-test.js\"\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"===\",\n                                \"spl/app/run\",\n                                \"JS\",\n                                \"tests\",\n                                \"completed\",\n                                \"===\\\"\"\n                        ]\n                }\n        }\n];\n    const globalOptions = {\n        \"help\": []\n};\n    \n    // Apply argument replacements to the pipeline\n    let pipelineStr = JSON.stringify(pipeline);\n    if (pipelineStr.indexOf(\"\\$@\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$@\", actionArgs.toString());\n    if (pipelineStr.indexOf(\"\\$*\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$*\", actionArgs.join(\" \"));\n    for (let i = 0; i < actionArgs.length; i++) {\n        pipelineStr = pipelineStr.replaceAll(\"\\$\" + (i+1).toString(), actionArgs[i]);\n    }\n    pipeline = JSON.parse(pipelineStr);\n    \n    // Set up the execution pipeline\n    spl.wsSet(input, \"spl/execute.set-pipeline\", {\n        headers: {\n            spl: {\n                execute: {\n                    pipeline: pipeline\n                }\n            }\n        },\n        value: {}\n    });\n    \n    // Apply global options if any\n    if (globalOptions.consoleMode) {\n        spl.setContext(input, \"consoleMode\", globalOptions.consoleMode);\n    }\n    \n    spl.gotoExecute ( input, \"spl/execute/set-pipeline\" );\n}\n///////////////////////////////////////////////////////////////////////////////",
    "/test-spl-app/modules/usr/js-run-tests_arguments.json": "{\n    \"headers\": { \"header\": [\n        { \"header\": \"usr/js-run-tests\" },\n        { \"content\": \"Auto-generated command from batch file js-run-tests.batch.\" },\n        { \"content\": \"{bold syntax}: {italic ./spl <appOpts> usr/js-run-tests <opts>}\" }\n    ]},\n    \"value\": [\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" },\n        { \"name\": \"args\", \"alias\": \"a\", \"multiple\": true, \"description\": \"Arguments to pass to the batch commands.\" }\n    ]\n}",
    "/test-spl-app/modules/usr/js-wrap-tests.js": "//  name        js-wrap-tests\n//  URI         usr/js-wrap-tests\n//  type        API Method\n//  description Auto-generated command from batch file js-wrap-tests.batch\n///////////////////////////////////////////////////////////////////////////////\nconst spl = require(\"../spl.js\")\n///////////////////////////////////////////////////////////////////////////////\nexports.default = function usr_js_wrap_tests (input)\n{\n    // Set the appRoot configuration\n    const appRoot = spl.context ( input, \"appRoot\" );\n    spl.setConfig ( input, \"spl/app\", \"appRoot\", appRoot );\n    \n    // Get arguments passed to this action\n    const actionArgs = spl.action(input, \"args\") || [];\n    \n    // Get the pre-parsed pipeline\n    let pipeline = [\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"===\",\n                                \"Testing\",\n                                \"spl/app/wrap\",\n                                \"with\",\n                                \"JavaScript\",\n                                \"scripts\",\n                                \"===\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"1:\",\n                                \"Wrap\",\n                                \"simple\",\n                                \"JS\",\n                                \"script\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/app/wrap\",\n                \"spl/app/wrap\": {\n                        \"file\": \"simple-test.js\"\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"2:\",\n                                \"Wrap\",\n                                \"JS\",\n                                \"script\",\n                                \"with\",\n                                \"arguments\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/app/wrap\",\n                \"spl/app/wrap\": {\n                        \"file\": \"args-test.js\"\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"3:\",\n                                \"Wrap\",\n                                \"SPL\",\n                                \"context\",\n                                \"script\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/app/wrap\",\n                \"spl/app/wrap\": {\n                        \"file\": \"spl-context-test.js\"\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"===\",\n                                \"spl/app/wrap\",\n                                \"JS\",\n                                \"tests\",\n                                \"completed\",\n                                \"===\\\"\"\n                        ]\n                }\n        }\n];\n    const globalOptions = {\n        \"help\": []\n};\n    \n    // Apply argument replacements to the pipeline\n    let pipelineStr = JSON.stringify(pipeline);\n    if (pipelineStr.indexOf(\"\\$@\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$@\", actionArgs.toString());\n    if (pipelineStr.indexOf(\"\\$*\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$*\", actionArgs.join(\" \"));\n    for (let i = 0; i < actionArgs.length; i++) {\n        pipelineStr = pipelineStr.replaceAll(\"\\$\" + (i+1).toString(), actionArgs[i]);\n    }\n    pipeline = JSON.parse(pipelineStr);\n    \n    // Set up the execution pipeline\n    spl.wsSet(input, \"spl/execute.set-pipeline\", {\n        headers: {\n            spl: {\n                execute: {\n                    pipeline: pipeline\n                }\n            }\n        },\n        value: {}\n    });\n    \n    // Apply global options if any\n    if (globalOptions.consoleMode) {\n        spl.setContext(input, \"consoleMode\", globalOptions.consoleMode);\n    }\n    \n    spl.gotoExecute ( input, \"spl/execute/set-pipeline\" );\n}\n///////////////////////////////////////////////////////////////////////////////",
    "/test-spl-app/modules/usr/js-wrap-tests_arguments.json": "{\n    \"headers\": { \"header\": [\n        { \"header\": \"usr/js-wrap-tests\" },\n        { \"content\": \"Auto-generated command from batch file js-wrap-tests.batch.\" },\n        { \"content\": \"{bold syntax}: {italic ./spl <appOpts> usr/js-wrap-tests <opts>}\" }\n    ]},\n    \"value\": [\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" },\n        { \"name\": \"args\", \"alias\": \"a\", \"multiple\": true, \"description\": \"Arguments to pass to the batch commands.\" }\n    ]\n}",
    "/test-spl-app/modules/usr/js-wrapped-execution-tests.js": "//  name        js-wrapped-execution-tests\n//  URI         usr/js-wrapped-execution-tests\n//  type        API Method\n//  description Auto-generated command from batch file js-wrapped-execution-tests.batch\n///////////////////////////////////////////////////////////////////////////////\nconst spl = require(\"../spl.js\")\n///////////////////////////////////////////////////////////////////////////////\nexports.default = function usr_js_wrapped_execution_tests (input)\n{\n    // Set the appRoot configuration\n    const appRoot = spl.context ( input, \"appRoot\" );\n    spl.setConfig ( input, \"spl/app\", \"appRoot\", appRoot );\n    \n    // Get arguments passed to this action\n    const actionArgs = spl.action(input, \"args\") || [];\n    \n    // Get the pre-parsed pipeline\n    let pipeline = [\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"===\",\n                                \"Testing\",\n                                \"execution\",\n                                \"of\",\n                                \"wrapped\",\n                                \"JS\",\n                                \"scripts\",\n                                \"===\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"1:\",\n                                \"Execute\",\n                                \"wrapped\",\n                                \"simple\",\n                                \"script\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"usr/simple-test\",\n                \"usr/simple-test\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"1:\",\n                                \"Execute\",\n                                \"wrapped\",\n                                \"simple\",\n                                \"script\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"2:\",\n                                \"Execute\",\n                                \"wrapped\",\n                                \"args\",\n                                \"script\",\n                                \"with\",\n                                \"parameters\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"usr/args-test\",\n                \"usr/args-test\": {\n                        \"args\": [\n                                \"hello\",\n                                \"world\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"3:\",\n                                \"Execute\",\n                                \"wrapped\",\n                                \"SPL\",\n                                \"context\",\n                                \"script\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"usr/spl-context-test\",\n                \"usr/spl-context-test\": {\n                        \"message\": [\n                                \"\\\"Test\",\n                                \"3:\",\n                                \"Execute\",\n                                \"wrapped\",\n                                \"SPL\",\n                                \"context\",\n                                \"script\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"===\",\n                                \"Wrapped\",\n                                \"JS\",\n                                \"execution\",\n                                \"tests\",\n                                \"completed\",\n                                \"===\\\"\"\n                        ]\n                }\n        }\n];\n    const globalOptions = {\n        \"help\": []\n};\n    \n    // Apply argument replacements to the pipeline\n    let pipelineStr = JSON.stringify(pipeline);\n    if (pipelineStr.indexOf(\"\\$@\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$@\", actionArgs.toString());\n    if (pipelineStr.indexOf(\"\\$*\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$*\", actionArgs.join(\" \"));\n    for (let i = 0; i < actionArgs.length; i++) {\n        pipelineStr = pipelineStr.replaceAll(\"\\$\" + (i+1).toString(), actionArgs[i]);\n    }\n    pipeline = JSON.parse(pipelineStr);\n    \n    // Set up the execution pipeline\n    spl.wsSet(input, \"spl/execute.set-pipeline\", {\n        headers: {\n            spl: {\n                execute: {\n                    pipeline: pipeline\n                }\n            }\n        },\n        value: {}\n    });\n    \n    // Apply global options if any\n    if (globalOptions.consoleMode) {\n        spl.setContext(input, \"consoleMode\", globalOptions.consoleMode);\n    }\n    \n    spl.gotoExecute ( input, \"spl/execute/set-pipeline\" );\n}\n///////////////////////////////////////////////////////////////////////////////",
    "/test-spl-app/modules/usr/js-wrapped-execution-tests_arguments.json": "{\n    \"headers\": { \"header\": [\n        { \"header\": \"usr/js-wrapped-execution-tests\" },\n        { \"content\": \"Auto-generated command from batch file js-wrapped-execution-tests.batch.\" },\n        { \"content\": \"{bold syntax}: {italic ./spl <appOpts> usr/js-wrapped-execution-tests <opts>}\" }\n    ]},\n    \"value\": [\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" },\n        { \"name\": \"args\", \"alias\": \"a\", \"multiple\": true, \"description\": \"Arguments to pass to the batch commands.\" }\n    ]\n}",
    "/test-spl-app/modules/usr/simple-test.js": "//  name        simple-test\n//  URI         usr/simple-test\n//  type        API Method\n//  description Auto-generated wrapper for simple-test.js\n///////////////////////////////////////////////////////////////////////////////\nconst spl = require(\"../spl.js\")\n///////////////////////////////////////////////////////////////////////////////\nexports.default = function usr_simple_test (input)\n{\n    const actionArgs = spl.action(input, \"args\") || [];\n    let scriptContent = `console.log(\"Simple JS test script executed successfully\");`;\n    \n    // Apply argument replacements\n    if (scriptContent.indexOf(\"\\$@\") > -1) scriptContent = scriptContent.replaceAll(\"\\$@\", actionArgs.toString());\n    if (scriptContent.indexOf(\"\\$*\") > -1) scriptContent = scriptContent.replaceAll(\"\\$*\", actionArgs.join(\" \"));\n    for (let i = 0; i < actionArgs.length; i++) {\n        scriptContent = scriptContent.replaceAll(\"\\$\" + (i+1).toString(), actionArgs[i]);\n    }\n    \n    eval(scriptContent);\n    spl.completed(input);\n}\n///////////////////////////////////////////////////////////////////////////////",
    "/test-spl-app/modules/usr/simple-test_arguments.json": "{\n    \"headers\": { \"header\": [\n        { \"header\": \"usr/simple-test\" },\n        { \"content\": \"Auto-generated wrapper for simple-test.js.\" },\n        { \"content\": \"{bold syntax}: {italic ./spl <appOpts> usr/simple-test <opts>}\" }\n    ]},\n    \"value\": [\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" },\n        { \"name\": \"args\", \"alias\": \"a\", \"multiple\": true, \"description\": \"Arguments to pass to the wrapped script.\" }\n    ]\n}",
    "/test-spl-app/modules/usr/spl-app-basic-tests.js": "//  name        spl-app-basic-tests\n//  URI         usr/spl-app-basic-tests\n//  type        API Method\n//  description Auto-generated command from batch file spl-app-basic-tests.batch\n///////////////////////////////////////////////////////////////////////////////\nconst spl = require(\"../spl.js\")\n///////////////////////////////////////////////////////////////////////////////\nexports.default = function usr_spl_app_basic_tests (input)\n{\n    // Set the appRoot configuration\n    const appRoot = spl.context ( input, \"appRoot\" );\n    spl.setConfig ( input, \"spl/app\", \"appRoot\", appRoot );\n    \n    // Get arguments passed to this action\n    const actionArgs = spl.action(input, \"args\") || [];\n    \n    // Get the pre-parsed pipeline\n    let pipeline = [\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Testing\",\n                                \"basic\",\n                                \"spl/app\",\n                                \"functionality\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/app/exec\",\n                \"spl/app/exec\": {\n                        \"file\": \"simple.batch\",\n                        \"args\": [\n                                \"\\\"test-parameter\\\"\"\n                        ]\n                }\n        },\n        {\n                \"action\": \"spl/console/log\",\n                \"spl/console/log\": {\n                        \"message\": [\n                                \"\\\"Basic\",\n                                \"spl/app\",\n                                \"tests\",\n                                \"completed\\\"\"\n                        ]\n                }\n        }\n];\n    const globalOptions = {\n        \"help\": []\n};\n    \n    // Apply argument replacements to the pipeline\n    let pipelineStr = JSON.stringify(pipeline);\n    if (pipelineStr.indexOf(\"\\$@\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$@\", actionArgs.toString());\n    if (pipelineStr.indexOf(\"\\$*\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$*\", actionArgs.join(\" \"));\n    for (let i = 0; i < actionArgs.length; i++) {\n        pipelineStr = pipelineStr.replaceAll(\"\\$\" + (i+1).toString(), actionArgs[i]);\n    }\n    pipeline = JSON.parse(pipelineStr);\n    \n    // Set up the execution pipeline\n    spl.wsSet(input, \"spl/execute.set-pipeline\", {\n        headers: {\n            spl: {\n                execute: {\n                    pipeline: pipeline\n                }\n            }\n        },\n        value: {}\n    });\n    \n    // Apply global options if any\n    if (globalOptions.consoleMode) {\n        spl.setContext(input, \"consoleMode\", globalOptions.consoleMode);\n    }\n    \n    spl.gotoExecute ( input, \"spl/execute/set-pipeline\" );\n}\n///////////////////////////////////////////////////////////////////////////////",
    "/test-spl-app/modules/usr/spl-app-basic-tests_arguments.json": "{\n    \"headers\": { \"header\": [\n        { \"header\": \"usr/spl-app-basic-tests\" },\n        { \"content\": \"Auto-generated command from batch file spl-app-basic-tests.batch.\" },\n        { \"content\": \"{bold syntax}: {italic ./spl <appOpts> usr/spl-app-basic-tests <opts>}\" }\n    ]},\n    \"value\": [\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" },\n        { \"name\": \"args\", \"alias\": \"a\", \"multiple\": true, \"description\": \"Arguments to pass to the batch commands.\" }\n    ]\n}",
    "/test-spl-app/modules/usr/spl-app-help-tests.js": "//  name        spl-app-help-tests\n//  URI         usr/spl-app-help-tests\n//  type        API Method\n//  description Auto-generated command from batch file spl-app-help-tests.batch\n///////////////////////////////////////////////////////////////////////////////\nconst spl = require(\"../spl.js\")\n///////////////////////////////////////////////////////////////////////////////\nexports.default = function usr_spl_app_help_tests (input)\n{\n    // Set the appRoot configuration\n    const appRoot = spl.action ( input, \"appRoot\" );\n    spl.setConfig ( input, \"spl/app\", \"appRoot\", appRoot );\n    \n    // Get arguments passed to this action\n    const actionArgs = spl.action(input, \"args\") || [];\n    \n    // Get the pre-parsed pipeline\n    let pipeline = [];\n    const globalOptions = {\n        \"help\": [\n                \"spl/app/create\",\n                \"spl/app/exec\",\n                \"spl/app/generate\",\n                \"spl/app/parse\",\n                \"spl/app/pipeline\",\n                \"spl/app/process\"\n        ]\n};\n    \n    // Apply argument replacements to the pipeline\n    let pipelineStr = JSON.stringify(pipeline);\n    if (pipelineStr.indexOf(\"\\$@\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$@\", actionArgs.toString());\n    if (pipelineStr.indexOf(\"\\$*\") > -1) pipelineStr = pipelineStr.replaceAll(\"\\$*\", actionArgs.join(\" \"));\n    for (let i = 0; i < actionArgs.length; i++) {\n        pipelineStr = pipelineStr.replaceAll(\"\\$\" + (i+1).toString(), actionArgs[i]);\n    }\n    pipeline = JSON.parse(pipelineStr);\n    \n    // Set up the execution pipeline\n    spl.wsSet(input, \"spl/execute.set-pipeline\", {\n        headers: {\n            spl: {\n                execute: {\n                    pipeline: pipeline\n                }\n            }\n        },\n        value: {}\n    });\n    \n    // Apply global options if any\n    if (globalOptions.consoleMode) {\n        spl.setContext(input, \"consoleMode\", globalOptions.consoleMode);\n    }\n    \n    spl.gotoExecute ( input, \"spl/execute/set-pipeline\" );\n}\n///////////////////////////////////////////////////////////////////////////////",
    "/test-spl-app/modules/usr/spl-app-help-tests_arguments.json": "{\n    \"headers\": { \"header\": [\n        { \"header\": \"usr/spl-app-help-tests\" },\n        { \"content\": \"Auto-generated command from batch file spl-app-help-tests.batch.\" },\n        { \"content\": \"{bold syntax}: {italic ./spl <appOpts> usr/spl-app-help-tests <opts>}\" }\n    ]},\n    \"value\": [\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" },\n        { \"name\": \"args\", \"alias\": \"a\", \"multiple\": true, \"description\": \"Arguments to pass to the batch commands.\" }\n    ]\n}",
    "/test-spl-app/modules/usr/spl-context-test.js": "//  name        spl-context-test\n//  URI         usr/spl-context-test\n//  type        API Method\n//  description Auto-generated wrapper for spl-context-test.js\n///////////////////////////////////////////////////////////////////////////////\nconst spl = require(\"../spl.js\")\n///////////////////////////////////////////////////////////////////////////////\nexports.default = function usr_spl_context_test (input)\n{\n    const actionArgs = spl.action(input, \"args\") || [];\n    let scriptContent = `// Test SPL integration in JS scripts\r\nconst spl = require(\"../spl.js\");\r\nconsole.log(\"Testing SPL context access from JS script\");\r\nconsole.log(\"AppRoot from script:\", spl.context(input, \"appRoot\"));`;\n    \n    // Apply argument replacements\n    if (scriptContent.indexOf(\"\\$@\") > -1) scriptContent = scriptContent.replaceAll(\"\\$@\", actionArgs.toString());\n    if (scriptContent.indexOf(\"\\$*\") > -1) scriptContent = scriptContent.replaceAll(\"\\$*\", actionArgs.join(\" \"));\n    for (let i = 0; i < actionArgs.length; i++) {\n        scriptContent = scriptContent.replaceAll(\"\\$\" + (i+1).toString(), actionArgs[i]);\n    }\n    \n    eval(scriptContent);\n    spl.completed(input);\n}\n///////////////////////////////////////////////////////////////////////////////",
    "/test-spl-app/modules/usr/spl-context-test_arguments.json": "{\n    \"headers\": { \"header\": [\n        { \"header\": \"usr/spl-context-test\" },\n        { \"content\": \"Auto-generated wrapper for spl-context-test.js.\" },\n        { \"content\": \"{bold syntax}: {italic ./spl <appOpts> usr/spl-context-test <opts>}\" }\n    ]},\n    \"value\": [\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" },\n        { \"name\": \"args\", \"alias\": \"a\", \"multiple\": true, \"description\": \"Arguments to pass to the wrapped script.\" }\n    ]\n}",
    "/test-spl-app/modules/usr_arguments.json": "{\r\n    \"headers\": \r\n    {\r\n        \"header\": \r\n        [\r\n            { \"header\": \"usr Package\" },\r\n            { \"content\": \"Implements the API functionality of the SPlectrum app.\" },\r\n            { \"content\": \"{bold syntax}: {italic ./spl <appOpts> <package> <options> <api>}\" }\r\n]\r\n    },\r\n    \"value\": \r\n    [ \r\n        { \"name\": \"help\", \"alias\": \"h\", \"type\": \"Boolean\", \"description\": \"show help information\", \"typeLabel\": \"flag\" }\r\n    ]\r\n}\r\n",
    "/test-spl-app/scripts/args-test.js": "console.log(\"Arguments test:\");\r\nconsole.log(\"Arg 1: $1\");\r\nconsole.log(\"Arg 2: $2\");  \r\nconsole.log(\"All args array: $@\");\r\nconsole.log(\"All args string: $*\");",
    "/test-spl-app/scripts/args-test.py": "#!/usr/bin/env python3\r\nimport sys\r\n\r\nprint(f\"Arguments received: {' '.join(sys.argv[1:])}\")\r\nprint(f\"Number of args: {len(sys.argv) - 1}\")\r\nprint(f\"All args as list: {sys.argv[1:]}\")\r\nfor i, arg in enumerate(sys.argv[1:], 1):\r\n    print(f\"Arg {i}: {arg}\")",
    "/test-spl-app/scripts/args-test.sh": "#!/bin/bash\necho \"Arguments received: $*\"\necho \"Number of args: $#\"\necho \"All args as array: $@\"\nfor i in $(seq 1 $#); do\n    echo \"Arg $i: ${!i}\"\ndone",
    "/test-spl-app/scripts/env-test.py": "#!/usr/bin/env python3\r\nimport os\r\nimport sys\r\n\r\nprint(f\"Current working directory: {os.getcwd()}\")\r\nprint(f\"Script location: {os.path.dirname(os.path.abspath(__file__))}\")\r\nprint(f\"Python version: {sys.version}\")\r\nprint(f\"Python executable: {sys.executable}\")",
    "/test-spl-app/scripts/env-test.sh": "#!/bin/bash\r\necho \"Current working directory: $(pwd)\"\r\necho \"Script location: $(dirname \"$0\")\"\r\necho \"PATH: $PATH\"",
    "/test-spl-app/scripts/simple-test.js": "console.log(\"Simple JS test script executed successfully\");",
    "/test-spl-app/scripts/simple-test.py": "#!/usr/bin/env python3\r\nprint(\"Simple Python test script executed successfully\")",
    "/test-spl-app/scripts/simple-test.sh": "#!/bin/bash\r\necho \"Simple bash test script executed successfully\"",
    "/test-spl-app/scripts/spl-context-test.js": "// Test SPL integration in JS scripts\r\nconst spl = require(\"../spl.js\");\r\nconsole.log(\"Testing SPL context access from JS script\");\r\nconsole.log(\"AppRoot from script:\", spl.context(input, \"appRoot\"));",
    "/test-spl-app/spl": "#!/bin/bash\nnode ./spl.js $@\n",
    "/test-spl-app/spl.js": "const spl = require(\"../../../modules/spl/spl.js\");\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Set SPlectrum and client root directory, extract command string\r\nvar root = process.cwd().split(\"/\");\r\nif (root.length === 1 ) root = root[0].split(`\\\\`);\r\nconst splRoot = root.slice(0,root.length-2).join(\"/\");\r\nconst session = root[root.length-1];\r\nconst appRoot = root.slice(root.length - 2).join(\"/\")\r\nconst commandString = process.argv.slice(2);\r\n///////////////////////////////////////////////////////////////////////////////\r\nconst context = {   action: \"spl/execute/initialise\", consoleProgress: \"start\",  consoleMode: \"standard\", // silent, standard, warning, verbose, debug\r\n                    runtimeMode: \"silent\", cwd: splRoot, session: session, modules: \"../modules\", moduleOverlay: [{ prefix: \"usr\", moduleRoot: `${appRoot}/modules` }], appRoot: appRoot, TTL: 100 };\r\nconst action = \"spl/app/process\";\r\nconst batch = commandString;\r\nconst config = { appRoot: appRoot, batch: batch };\r\n///////////////////////////////////////////////////////////////////////////////\r\nvar command = { headers: {}, value: {} }\r\nspl.setContext ( command, null, context );\r\nspl.setRequest ( command, \"action\", action );\r\nspl.setConfig ( command, action, null, config );\r\n///////////////////////////////////////////////////////////////////////////////\r\nspl.moduleAction( command, \"spl/execute/execute\" );\r\n"
  }
}